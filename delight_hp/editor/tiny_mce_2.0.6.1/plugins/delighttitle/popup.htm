<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>{$lang_delighttitle_templates}</title>
	<script language="javascript" type="text/javascript" src="../../tiny_mce_popup.js"></script>
	<script language="javascript" type="text/javascript" src="../../utils/mctabs.js"></script>
	<script language="javascript" type="text/javascript">
	<!--
	var templateList = '';
	
	function init() {
		//var inst = mceTemplateShow.selectedInstance;
		//var elm = inst.getFocusElement();

		//alert("Got a window argument from plugin: " + mceTemplateShow.getWindowArg('current'));

		// Set the form item value to the selected node element name
		//document.forms[0].nodename.value = elm.nodeName;

		//var container = document.getElementById('_templates_container');
		//if (container) {
		//	dWebRequest.Init(true);
		//	dWebRequest.sendTemplateRequest(tinyMCE.getWindowArg('txtId'));
		//}
		
		var container = document.getElementById('_templates_container');
		if (container) {
			var data = [];
			new Ajax.Request('/delight_hp/index.php', {
				method : 'post',
				parameters : {nm:true, adm:155, textContent:'ajaxtemplates', textOptions:delightEditor.getWindowArg('txtId')},
				onSuccess : function(transport) {
					try {
						data = eval(transport.responseText.substr(10).evalJSON());
						showTemplates(data.layoutList, data.optionsList, data.loadCssFiles);
					} catch (e) {
						if (console) { console.debug(e); }
						else { alert("ERROR: " + e); }
					}
				}
			});
		}
	}
	
	function showTemplates(layout, options, csscontent) {
		var _css,head,le = null;
		
		// add layout-css-files
		head = document.getElementsByTagName("head");
		for (_css in csscontent) {
			le = document.createElement('link');
			le.setAttribute('href', csscontent[_css]);
			le.setAttribute('rel', 'stylesheet');
			le.setAttribute('type', 'text/css');
			head.item(0).appendChild(le);
		}
		
		// add layouts
		var _cont = document.getElementById('_templates_container');
		var _cnt = 0;
		var _row, _cell, _cell1 = null;
		var _sel = tinyMCE.getWindowArg('current');
		var _ctpl = '';
		var _tbl = '<table border="0" style="width:100%;">';
		if (_cont) {
			for (tpl in layout) {
				_ctpl = layout[tpl].replace(/\t/g, "").replace(/\\"/g, '"');
				_ctpl = _ctpl.replace(/(\<script)(.*?)(\<\/script\>)/gi, "");
				_ctpl = _ctpl.replace(/(\<input)(.*?)(>)/gi, "");
				_ctpl = _ctpl.replace(/(\<form)(.*?)(>)/gi, "");
				_ctpl = _ctpl.replace(/(\<\/form)(.*?)(>)/gi, "");
				
				if (_ctpl.length > 0) {
					_row = _cont.insertRow(_cnt);
					_cell = _row.insertCell(0);
					_cell.style.width = '10%';
					_cell.innerHTML = '<input type="radio" name="_layout" value="' + tpl + '"' + ((_sel == tpl)?' checked="checked"':'') + ' onclick="showOptions(\''+tpl+'\');" />';
					_cell1 = _row.insertCell(1);
					_cell1.style.width = '90%';
					_cell1.style.border = '1px inset #3C3C3C';
					if (_ctpl.substr(0,3) == '<tr') {
						_cell1.innerHTML = _tbl + _ctpl + '<tr><td><b>' + tpl + '</b></td></tr></table>';
					} else {
						_cell1.innerHTML = _ctpl + '<br /><b>' + tpl + '</b>';
					}
					_cell1.style.backgroundColor = 'rgb(240, 240, 238)';
					_cnt++;
				}
			}
		}

		// create options for layouts
		var opt, _options = '', optlist = '';
		for (opt in options) {
			if (opt != 'none') {
				_options += '<div style="display:'+((_sel==opt)?'block':'none')+';" name="layout_options_div" id="layout_options_'+opt.replace(/[^0-9a-zA-Z_-]/g, "")+'">'
				_options += '<h2>{$lang_delighttitle_optionsfor}: ' + opt + '</h2>';
				_options += '<form id="options_form_' + opt.replace(/[^0-9a-zA-Z_-]/g, "") + '">';
				_options += options[opt];
				_options += '</form>';
				_options += '</div>';
				
				if (optlist.length > 0) {
					optlist += ',';
				}
				optlist += opt;
			}
		}
		document.getElementById('options_panel').innerHTML = tinyMCE.applyTemplate(_options);
		
		templateList = optlist;
		setDefaultOptions();
	}
	
	function setDefaultOptions() {
		var inst = tinyMCE.selectedInstance;
		var formObj = inst.formElement.form;

		var elemId, textOpt, optList, opt, form, tpl, elem, e, i, j, x, y;
		var tpllist = templateList.split(',');

		// get options from current text-entry
		for (var i=0; i<formObj.elements.length; i++) {
			elemId = formObj.elements[i].name ? formObj.elements[i].name : formObj.elements[i].id;
			if (elemId.indexOf('options_') == 0) {
				textOpt = formObj.elements[i].value;
				break;
			}
		}
				
		// get the options and parse
		optList = textOpt.split('##');
		for (i = 0; i < optList.length; i++) {
			opt = optList[i].replace(/\#/, "").split('=');
			
			// set the Template-Options
			for (j = 0; j < tpllist.length; j++) {
				form = document.getElementById('options_form_' + tpllist[j]);
				if (form) {
					elem = form.elements;
					
					for (x = 0; x < elem.length; x++) {
						e = elem[x];
						if (e.name == opt[0]) {
							if ( (e.nodeName == 'INPUT') && (e.type == 'text') ) {
								e.value = opt[1];
							} else if ( (e.nodeName == 'INPUT') && (e.type == 'radio') && (e.value == opt[1]) ) {
								e.checked = true;
							} else if ( (e.nodeName == 'SELECT') ) {
								for (y = 0; y < e.options.length; y++) {
									if (e.options[y].value == opt[1]) {
										e.options[y].selected = true;
									} else {
										e.options[y].selected = false;
									}
								}
							}
							
						}
					}
					
				}
			}
			
		}
		
	}

	function showOptions(tpl) {
		var i, opt, optCont = document.getElementsByName('layout_options_div');
		if (optCont && (optCont.length > 0)) {
			for (i = 0; i < optCont.length; i++) {
				optCont[i].style.display = 'none';
			}
		}
		if (document.getElementById('layout_options_' + tpl)) {
			document.getElementById('layout_options_' + tpl).style.display = 'block';
		}
	}

	function applyChange(obj) {
		var i,j,e;
		var name = obj.name;
		var type = obj.type;
		var elem = document.getElementsByName(name);

		if (elem) {
			for (i = 0; i < elem.length; i++) {

				e = elem[i];
				if ( (e.type == type) && (obj.id != e.id) ) {
					
					if ((e.nodeName == 'INPUT') && (type == 'text')) {
						e.value = obj.value;
					} else if (e.nodeName == 'SELECT') {
						for (j = 0; j < e.options.length; j++) {
							if (e.options[j].value == obj.value) {
								e.options[j].selected = true;
							} else {
								e.options[j].selected = false;
							}
						}
					} else if ( (e.nodeName == 'INPUT') && (type == 'radio') && (e.value == obj.value)) {
						e.checked = true;
					}
					
				}
				
			}
		}
	}

	function changeTemplate() {
		var _elem, e, i = 0, _option = '', _layout = '';

		// get the selected Layout
		_elem = document.getElementsByName('_layout');
		for (i = 0; i < _elem.length; i++) {
			if (_elem[i].checked) {
				_layout = _elem[i].value;
				break;
			}
		}

		// get all selected options fro selected layout
		if (_layout.length > 0) {
			_elem = document.forms['options_form_' + _layout].elements;
			for (i = 0; i < _elem.length; i++) {
				e = _elem[i];
				if ( (e.nodeName == 'INPUT') && (e.type == 'text') ) {
					_option += '#' + e.name + '=' + e.value + '#';
				} else if (e.nodeName == 'SELECT') {
					_option += '#' + e.name + '=' + e.options[e.selectedIndex].value + '#';
				} else  if ( (e.nodeName == 'INPUT') && (e.type == 'radio') && (e.checked) ) {
					_option += '#' + e.name + '=' + e.value + '#';
				}
			}
		}

		// Execute the mceTemplate command without UI this time
		tinyMCEPopup.execCommand('mceTemplate', null, {layout : _layout, options : _option} );

		// Close the dialog
		tinyMCEPopup.close();
	}
	//-->
	</script>
	<script language="javascript" type="text/javascript" src="../../../delight_ajax.js"></script>
	<base target="_self" />
</head>
<body onload="tinyMCEPopup.executeOnLoad('init();');"> 

	<div class="tabs">
		<ul>
			<li id="general_tab" class="current">
				<span><a href="javascript:mcTabs.displayTab('general_tab','general_panel');" onmousedown="return false;">{$lang_delighttitle_selecttpl}</a></span>
			</li>
			<li id="options_tab">
				<span><a href="javascript:mcTabs.displayTab('options_tab','options_panel');" onmousedown="return false;">{$lang_delighttitle_options}</a></span>
			</li>
		</ul>
	</div>

	<div class="panel_wrapper" style="height:320;">

		<div id="general_panel" class="panel current" style="overflow:auto;width:465px;height:330px;">
			<form onsubmit="insert();return false;">
				<input name="_options" value="" type="hidden" />
				<table border="0" cellpadding="4" cellspacing="4" id="_templates_container" style="width:445px;height:330px;">
 		  	</table>
 		  </form>
		</div>

		<div id="options_panel" class="panel" style="overflow:auto;height:100%;">
			<table border="0" cellpadding="4" cellspacing="0" id="_templates_options">
				<tr>
					<td nowrap="nowrap">{$lang_delighttitle_not_yet}</td>
					<td>
						&nbsp;
					</td>
				</tr>
 		  </table>
		</div>

	</div>

	<div class="mceActionPanel">
		<div style="float: left">
			<input type="button" id="insert" name="insert" value="{$lang_delighttitle_change}" onclick="changeTemplate();" />
		</div>

		<div style="float: right">
			<input type="button" id="cancel" name="cancel" value="{$lang_delighttitle_cancel}" onclick="tinyMCEPopup.close();" />
		</div>
	</div>

</body> 
</html>
