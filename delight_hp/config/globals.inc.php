<?php

// lookup-Tables for QuotedPrintable
$qpKeys = array ("\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07",
"\x08", "\x09", "\x0A", "\x0B", "\x0C", "\x0D", "\x0E", "\x0F", "\x10", "\x11",
"\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x19", "\x1A", "\x1B",
"\x1C", "\x1D", "\x1E", "\x1F", "\x7F", "\x80", "\x81", "\x82", "\x83", "\x84",
"\x85", "\x86", "\x87", "\x88", "\x89", "\x8A", "\x8B", "\x8C", "\x8D", "\x8E",
"\x8F", "\x90", "\x91", "\x92", "\x93", "\x94", "\x95", "\x96", "\x97", "\x98",
"\x99", "\x9A", "\x9B", "\x9C", "\x9D", "\x9E", "\x9F", "\xA0", "\xA1", "\xA2",
"\xA3", "\xA4", "\xA5", "\xA6", "\xA7", "\xA8", "\xA9", "\xAA", "\xAB", "\xAC",
"\xAD", "\xAE", "\xAF", "\xB0", "\xB1", "\xB2", "\xB3", "\xB4", "\xB5", "\xB6",
"\xB7", "\xB8", "\xB9", "\xBA", "\xBB", "\xBC", "\xBD", "\xBE", "\xBF", "\xC0",
"\xC1", "\xC2", "\xC3", "\xC4", "\xC5", "\xC6", "\xC7", "\xC8", "\xC9", "\xCA",
"\xCB", "\xCC", "\xCD", "\xCE", "\xCF", "\xD0", "\xD1", "\xD2", "\xD3", "\xD4",
"\xD5", "\xD6", "\xD7", "\xD8", "\xD9", "\xDA", "\xDB", "\xDC", "\xDD", "\xDE",
"\xDF", "\xE0", "\xE1", "\xE2", "\xE3", "\xE4", "\xE5", "\xE6", "\xE7", "\xE8",
"\xE9", "\xEA", "\xEB", "\xEC", "\xED", "\xEE", "\xEF", "\xF0", "\xF1", "\xF2",
"\xF3", "\xF4", "\xF5", "\xF6", "\xF7", "\xF8", "\xF9", "\xFA", "\xFB", "\xFC",
"\xFD", "\xFE", "\xFF" );

$qpReplaceValues = array ("=00", "=01", "=02", "=03", "=04", "=05", "=06", "=07",
"=08", "=09", "=0A", "=0B", "=0C", "=0D", "=0E", "=0F", "=10", "=11", "=12",
"=13", "=14", "=15", "=16", "=17", "=18", "=19", "=1A", "=1B", "=1C", "=1D",
"=1E", "=1F", "=7F", "=80", "=81", "=82", "=83", "=84", "=85", "=86", "=87",
"=88", "=89", "=8A", "=8B", "=8C", "=8D", "=8E", "=8F", "=90", "=91", "=92",
"=93", "=94", "=95", "=96", "=97", "=98", "=99", "=9A", "=9B", "=9C", "=9D",
"=9E", "=9F", "=A0", "=A1", "=A2", "=A3", "=A4", "=A5", "=A6", "=A7", "=A8",
"=A9", "=AA", "=AB", "=AC", "=AD", "=AE", "=AF", "=B0", "=B1", "=B2", "=B3",
"=B4", "=B5", "=B6", "=B7", "=B8", "=B9", "=BA", "=BB", "=BC", "=BD", "=BE",
"=BF", "=C0", "=C1", "=C2", "=C3", "=C4", "=C5", "=C6", "=C7", "=C8", "=C9",
"=CA", "=CB", "=CC", "=CD", "=CE", "=CF", "=D0", "=D1", "=D2", "=D3", "=D4",
"=D5", "=D6", "=D7", "=D8", "=D9", "=DA", "=DB", "=DC", "=DD", "=DE", "=DF",
"=E0", "=E1", "=E2", "=E3", "=E4", "=E5", "=E6", "=E7", "=E8", "=E9", "=EA",
"=EB", "=EC", "=ED", "=EE", "=EF", "=F0", "=F1", "=F2", "=F3", "=F4", "=F5",
"=F6", "=F7", "=F8", "=F9", "=FA", "=FB", "=FC", "=FD", "=FE", "=FF" );

// A List of all known Browsers (each value is seperated into [0] as BrowserName and [1] as a RegularExpression)
$KnownBrowsers = array ();
$KnownBrowsers [] = array ("Almaden", "(www\.almaden\.com\/cs\/crawler)" );
$KnownBrowsers [] = array ("Amfibibot", "(Amfibi Robot;)(.*)(www\.amfibi\.com)" );
$KnownBrowsers [] = array ("AnswereBus", "(AnswereBus)(.*)(www\.answerebus\.com)" );
$KnownBrowsers [] = array ("AOL", "(Compatible; AOL)" );
$KnownBrowsers [] = array ("Appie", "(Appie)(.*)(www\.walhello\.com)" );
$KnownBrowsers [] = array ("Argus", "(Argus)(.*)(www\.simpy\.com)" );
$KnownBrowsers [] = array ("Ask Jeeves", "(compatible; Ask Jeeves\/Teoma)" );
$KnownBrowsers [] = array ("ASPseek", "(ASPseek)" );
$KnownBrowsers [] = array ("AvantGo", "(compatible; AvantGo)" );
$KnownBrowsers [] = array ("BaiDuSpider", "(BaiDuSpider)(.*)(www\.baidu\.com\/search\/)" );
$KnownBrowsers [] = array ("BDFetch", "(BDFetch)" );
$KnownBrowsers [] = array ("Big Brother", "(Big Brother)(.*)(pauillac\.inria\.fr)" );
$KnownBrowsers [] = array ("Boitho-dc", "(boitho\.com)(.*)(www\.boitho\.com\/)" );
$KnownBrowsers [] = array ("BorderManager", "(compatible; BorderManager)" );
$KnownBrowsers [] = array ("BruinBot", "(BruinBot)(.*)(webarchives\.cs\.ucla\.edu)" );
$KnownBrowsers [] = array ("Cerberian Brtrs", "(compatible; Cerberian Drtrs)" );
$KnownBrowsers [] = array ("Clushbot", "(Clushbot)(.*)(www\.clushbot\.com)" );
$KnownBrowsers [] = array ("ConveraCrawler", "(ConveraCrawler)" );
$KnownBrowsers [] = array ("CydralSpider", "(CydralSpider)" );
$KnownBrowsers [] = array ("DoCoMo", "(DoCoMo)" );
$KnownBrowsers [] = array ("Dual Proxy", "(Dual Proxy)" );
$KnownBrowsers [] = array ("Dumbot", "(Dumbot)(.*)(dumbfind\.com)" );
$KnownBrowsers [] = array ("EmailSiphon", "(EmailSiphon)" );
$KnownBrowsers [] = array ("E-Society", "(e\-SocietyRobot)(.*)(www\.yama\.info\.waseda\.ac\.jp)" );
$KnownBrowsers [] = array ("FastBug", "(FastBug)(.*)(www\.ay\-up\.com)" );
$KnownBrowsers [] = array ("FAST", "(FAST\-WebCrawler|FAST Enterprise)" );
$KnownBrowsers [] = array ("Favicon", "(favicon )(finder|monitor)" );
$KnownBrowsers [] = array ("Fileangy", "(Fileangy)(.*)(Fileangy;)" );
$KnownBrowsers [] = array ("FindLinks", "([fF]ind[lL]inks)(.*)(wortschatz\.uni\-leipzig\.de\/findlinks\/)" );
$KnownBrowsers [] = array ("Fluffy", "(compatible; Fluffy the spider)" );
$KnownBrowsers [] = array ("FusionBot", "(compatible;)(.*)(www\.galaxy\.com)(.*)(www\.pgts\.com\.au)" );
$KnownBrowsers [] = array ("FyberSpider", "(FyberSpider)(.*)(www\.fybersearch\.com)" );
$KnownBrowsers [] = array ("Gaisbot", "(Gaisbot)(.*)(gais\.cs\.ccu\.edu\.tw)" );
$KnownBrowsers [] = array ("Gazz", "(gazz)(.*)(nttr\.co\.jp)" );
$KnownBrowsers [] = array ("Generic", "(Generic)" );
$KnownBrowsers [] = array ("GeonaBot", "(GeonaBot)(.*)(www\.geona\.com)" );
$KnownBrowsers [] = array ("GetRight", "(GetRight)" );
$KnownBrowsers [] = array ("Gigabot", "(Gigabot)" );
$KnownBrowsers [] = array ("Girafabot", "(compatible; MSIE)(.*)(Girafabot)(.*)(www\.girafa\.com)" );
$KnownBrowsers [] = array ("Goldfire", "(Goldfire Server)" );
$KnownBrowsers [] = array ("GoogleWeb", "(Googlebot)(.*)(www\.google\.com|www\.googlebot\.com)" );
$KnownBrowsers [] = array ("GoogleImage", "(Googlebot\-Image)" );
$KnownBrowsers [] = array ("GoogleTest", "(Googlebot)(.*)(Test)" );
$KnownBrowsers [] = array ("Grub-Client", "(compatible; grub\-client)" );
$KnownBrowsers [] = array ("Hatena Antenna", "(Hatena Antenna)(.*)(a\.hatena\.ne\.jp)" );
$KnownBrowsers [] = array ("LinkValidator", "(Link Validator)(.*)(www\.lithopssoft\.com)" );
$KnownBrowsers [] = array ("HTTPget", "(httpget)" );
$KnownBrowsers [] = array ("HTTrack", "(compatible; HTTrack)" );
$KnownBrowsers [] = array ("IA-Archiver", "(ia_archiver)" );
$KnownBrowsers [] = array ("Ichiro", "(ichiro)(.*)(nttr\.co\.jp)" );
$KnownBrowsers [] = array ("IconSurf", "(IconSurf)(.*)(http:\/\/iconsurf\.com\/)" );
$KnownBrowsers [] = array ("IlTrovatore-Setaccio", "(Il[tT]rovatore\-Setaccio)" );
$KnownBrowsers [] = array ("Indy Library", "(compatible; Indy Library)" );
$KnownBrowsers [] = array ("InelaBot", "(InelaBot)(.*)(inelagant\.org\/bot)" );
$KnownBrowsers [] = array ("Infoseek", "(Infoseek)(.*)(SideWinder)" );
$KnownBrowsers [] = array ("Inktomi slurp", "(Slurp)(.*)(inktomi\.com)" );
$KnownBrowsers [] = array ("InternetLinkAgent", "(InternetLinkAgent)" );
$KnownBrowsers [] = array ("IRL bot", "(IRLbot)(.*)(irl\.cs\.tamu\.edu)" );
$KnownBrowsers [] = array ("IstartHere", "(http:\/\/www\.istarthere\.com)" );
$KnownBrowsers [] = array ("Java", "(Java)" );
$KnownBrowsers [] = array ("JoBo", "(JoBo)(.*)(www\.matuscheck\.net)" );
$KnownBrowsers [] = array ("Knowledge", "(Knowledge\.com)" );
$KnownBrowsers [] = array ("Larbin", "(larbin)(.*)(oktie\.com|airmail\.com|unspecified\.com|cosco\.hiit\.fi)" );
$KnownBrowsers [] = array ("LibWWW-perl", "^(libwww\-)(MGET|perl)" );
$KnownBrowsers [] = array ("LimeBot", "(LimeBot)(.*)(www\.cruiselime\.com)" );
$KnownBrowsers [] = array ("LinkLint", "(LinkLint\-checkonly)" );
$KnownBrowsers [] = array ("Linknzbot", "(Linknzbot)(.*)(www\.linnkzbot\.co\.nz)" );
$KnownBrowsers [] = array ("Links SQL", "(Links SQL)" );
$KnownBrowsers [] = array ("LNSpiderGuy", "(LNSpiderGuy)" );
$KnownBrowsers [] = array ("LWP-Request", "(lwp\-)(trivial|request)" );
$KnownBrowsers [] = array ("Mediapartners", "(Mediapartners\-Google)" );
$KnownBrowsers [] = array ("Microsoft", "(Microsoft URL Control)" );
$KnownBrowsers [] = array ("MozDex", "(mozDex;)(.*)(www\.mozdex\.com\/)" );
$KnownBrowsers [] = array ("Mozilla Netcraft", "(compatible; Netcraft Web Server Survey)" );
$KnownBrowsers [] = array ("MS Data Access", "(Microsoft Data Access Internet Publishing)" );
$KnownBrowsers [] = array ("MS FrontPage", "(MSFrontPage|compatible; FrontPage)" );
$KnownBrowsers [] = array ("MSIE Crawler", "(compatible; MSIE)(.*)(MSIECrawler)" );
$KnownBrowsers [] = array ("MSN Bot", "(msnbot)(.*)(search\.msn\.com)" );
$KnownBrowsers [] = array ("MSProxy", "(MSProxy)" );
$KnownBrowsers [] = array ("MysteryBot", "^(Mozilla\/3\.01 \(compatible;\))$" );
$KnownBrowsers [] = array ("NaaverBot", "(NaverBot)" );
$KnownBrowsers [] = array ("NetNose", "(compatible; MSIE)(.*)(NetNose\-Crawler)" );
$KnownBrowsers [] = array ("NetResearch", "(NetResearchServer)" );
$KnownBrowsers [] = array ("NextGenSearch", "(NextGenSearchBot)" );
$KnownBrowsers [] = array ("None", "^(none)$" );
$KnownBrowsers [] = array ("NPBot", "(NPBot)(.*)(www\.nameprotect\.com)" );
$KnownBrowsers [] = array ("NuSearch", "(NuSearch Spider www\.nusearch\.com)" );
$KnownBrowsers [] = array ("NutchBot", "(Nutch; http:\/\/www\.nutch\.org)" );
$KnownBrowsers [] = array ("Obot", "(obot)" );
$KnownBrowsers [] = array ("Ocelli", "(Ocelli)(.*)(www\.globalspec\.com)" );
$KnownBrowsers [] = array ("OmniExplorer", "(OmniExplorer_Bot)(.*)(www\.omni\-explorer\.com)" );
$KnownBrowsers [] = array ("Openbot", "(Openbot|Openfind)(.*)(www\.openfind\.com\.tw|gais\.cs\.ccu\.edu\.tw)" );
$KnownBrowsers [] = array ("Pat Webbot", "(Patwebbot)(.*)(www\.herz\-power\.de)" );
$KnownBrowsers [] = array ("PEERbot", "(PEERbot www\.peerbot\.com)" );
$KnownBrowsers [] = array ("PipeLiner", "(pipeLiner)(.*)(PipeLine Spider)(.*)(www\.pipeline\-search\.com)" );
$KnownBrowsers [] = array ("Pompos", "(Pompos)(.*)(dir\.com\/pompos)" );
$KnownBrowsers [] = array ("Portal Manager", "(Portal Manager)" );
$KnownBrowsers [] = array ("Psbot", "(psbot)(.*)(www\.picsearch\.com)" );
$KnownBrowsers [] = array ("QuepasaCreep", "(QuepasaCreep)(.*)(quepasacorp\.com)" );
$KnownBrowsers [] = array ("RixBot", "(RixBot)(.*)(www\.oops\-as\.no\/rix)" );
$KnownBrowsers [] = array ("RoboPal", "(RoboPal)(.*)(www\.findpal\.com)" );
$KnownBrowsers [] = array ("Robozilla", "(Robozilla)" );
$KnownBrowsers [] = array ("RPT-HTTPClient", "(RPT\-HTTPClient)" );
$KnownBrowsers [] = array ("SafariBookmark", "(SafariBookmarkChecker)(.*)(www\.corilois\.ch)" );
$KnownBrowsers [] = array ("Scooter", "(Scooter)" );
$KnownBrowsers [] = array ("Scrubby", "(Scrubby)(.*)(www\.scrubtheweb\.com)" );
$KnownBrowsers [] = array ("Search Agent", "(Search Agent)" );
$KnownBrowsers [] = array ("Seekbot", "(Seekbot)(.*)(www\.seekbot\.net)" );
$KnownBrowsers [] = array ("Sensis.au", "(Sensis\.com\.au Web Crawler)" );
$KnownBrowsers [] = array ("Sitecheck", "(InternetSeer\.com)" );
$KnownBrowsers [] = array ("Sohu-Search", "(sohu\-search)" );
$KnownBrowsers [] = array ("SpeedySpider", "(compatible; SpeedySpider; www\.entireewb\.com)" );
$KnownBrowsers [] = array ("SpurlBot", "(compatible; SpurlBot)" );
$KnownBrowsers [] = array ("SqWorm", "(Sqworm)" );
$KnownBrowsers [] = array ("Szukacz", "(Szukacz)(.*)(www\.szukacz\.pl)" );
$KnownBrowsers [] = array ("Tarantula", "(Tarantula Experimantal Crawler)" );
$KnownBrowsers [] = array ("TheSuBot", "(www\.thesubot\.de)" );
$KnownBrowsers [] = array ("Thumbshots", "(www\.thumbshots\.de)" );
$KnownBrowsers [] = array ("TulipChain", "(TulipChain)(.*)(ostermiller\.org)(.*)(Java)" );
$KnownBrowsers [] = array ("TurnitinBot", "(TurnitinBot)(.*)(www\.turnitin\.com)" );
$KnownBrowsers [] = array ("TutorGigBot", "(TutorGigBot)(.*)(www\.tutorgig\.info)" );
$KnownBrowsers [] = array ("Tutorial Crawler", "(Tutorial Crawler)(.*)(www\.tutorgig\.com)" );
$KnownBrowsers [] = array ("Unchaos Crawler", "(unchaos_crawler)(.*)(unchaos.com)" );
$KnownBrowsers [] = array ("Ansearch", "(AnsearchBot)" );
$KnownBrowsers [] = array ("Libero.it", "(libero\.it)" );
$KnownBrowsers [] = array ("LeechGet", "(LeechGet)(.*)(www\.leechget\.net)" );
$KnownBrowsers [] = array ("Updated", "(updated)(.*)(updated\.com)" );
$KnownBrowsers [] = array ("USyd NLP Spider", "(USyd\-NLP\-Spider)(.*)(www\.it\.usyd\.edu\.au)" );
$KnownBrowsers [] = array ("VSpider", "(vspider)" );
$KnownBrowsers [] = array ("W3C Linkcheck", "(W3C\-checklink)(.*)(libwww\-perl)" );
$KnownBrowsers [] = array ("W3C Validator", "(W3C\-Validator)(.*)(libwww\-perl)" );
$KnownBrowsers [] = array ("WebFilter", "(WebFilter)(.*)(Robot)" );
$KnownBrowsers [] = array ("Webinator", "(compatible; Webinator\-indexer)" );
$KnownBrowsers [] = array ("WebRace", "(WebRACE)(.*)(University of Cyprus)" );
$KnownBrowsers [] = array ("WebSauger", "(WebSauger)" );
$KnownBrowsers [] = array ("WebSearch", "(WebSearch)(.*)(The Australian Search Engine)" );
$KnownBrowsers [] = array ("WebWombat", "(www\.webwombat\.com\.au)" );
$KnownBrowsers [] = array ("WebYield", "(webyield)(.*)(www\.webyield\.net\/search\/)" );
$KnownBrowsers [] = array ("Wget", "(Wget)" );
$KnownBrowsers [] = array ("WWWeasel", "(WWWeasel)(.*)(http:\/\/wwweasel\.de)" );
$KnownBrowsers [] = array ("Xenu Link Sleuth", "(Xenu)(.*)(Link Sleuth)" );
$KnownBrowsers [] = array ("Yahoo", "(Yahoo\-MMCrawler|compatible; Yahoo)" );
$KnownBrowsers [] = array ("Yotta Cars", "(YottaCars_Bot)(.*)(www\.yottacars\.com)" );
$KnownBrowsers [] = array ("Zoa Crawler", "(Zoa\-Crawler)" );
$KnownBrowsers [] = array ("Zeus", "(Zeus)(.*)(Webster)" );
$KnownBrowsers [] = array ("ZipppBot", "(ZipppBot)(.*)(ZipppBot; http:\/\/www\.zippp\.net)" );
$KnownBrowsers [] = array ("ZoomSpider", "(ZoomSpider)(.*)(wrensoft\.com)" );
$KnownBrowsers [] = array ("ZyBorg", "(compatible ZyBorg)(.*)(www\.WISEnubot\.com)" );
$KnownBrowsers [] = array ("abot", "(abot)(.*)(abot; http:\/\/www\.abot\.com)" );
$KnownBrowsers [] = array ("Ace Explorer", "(Ace Explorer)" );
$KnownBrowsers [] = array ("ACS-NF", "(ACS\-NF)(.*)(NEC)" );
$KnownBrowsers [] = array ("ActiveBookmark", "(ActiveBookmark)" );
$KnownBrowsers [] = array ("AI", "(\(compatible; AI\))" );
$KnownBrowsers [] = array ("AIM", "(AIM)((\(Mozilla)?)" );
$KnownBrowsers [] = array ("Aipbot", "(aipbot)(.*)(www\.aipbot\.com)" );
$KnownBrowsers [] = array ("Alizee iPod", "(Alizee iPod)" );
$KnownBrowsers [] = array ("Alpha", "(alpha|ALPHA)((compatible; alpha)?)" );
$KnownBrowsers [] = array ("Amaya", "(amaya)(.*)(libwww)" );
$KnownBrowsers [] = array ("AmigaVoyager", "(Amiga Voyager|AmigaVoyager|Voyager; AmigaOS)" );
$KnownBrowsers [] = array ("AnsearchBot", "(compatible; AnsearchBot)(.*)(www\.ansearch\.com\.au)" );
$KnownBrowsers [] = array ("Ant Fresco", "(compatible; ANTFresco|compatible; NCBrowser(.*)ANTFresco)" );
$KnownBrowsers [] = array ("AOL", "(AOLServer|AOL(.*)DOS|Lindows 2003|aolbrowser)" );
$KnownBrowsers [] = array ("ArachnetAgent", "(ArachnetAgent)(.*)(TuringOS)" );
$KnownBrowsers [] = array ("Arexx", "([aA][rR]exx)" );
$KnownBrowsers [] = array ("ArtfaceBot", "(ArtfaceBot \(compatible; MSIE)" );
$KnownBrowsers [] = array ("Ask Jeeves Teoma", "(compatible; Ask Jeeves\/Teoma)" );
$KnownBrowsers [] = array ("Astra", "(Astra)(.*)(WinNT)" );
$KnownBrowsers [] = array ("Atari", "(Atari)" );
$KnownBrowsers [] = array ("Auto-Proxy", "(Auto\-Proxy Downloader)" );
$KnownBrowsers [] = array ("Avant", "(avantbrowser\.com)" );
$KnownBrowsers [] = array ("AvantGo \\2", "(Avant[gG]o\/)([\d]+\.[\d]+)" );
$KnownBrowsers [] = array ("AWeb \\2", "([aA][wW][eE][bB]\/)([\d]+.[\d]+)" );
$KnownBrowsers [] = array ("BecomeBot", "(compatible; BecomeBot)(.*)(www\.become\.com)" );
$KnownBrowsers [] = array ("BlackBerry", "(BlackBerry)(.*)(UP\.Link)" );
$KnownBrowsers [] = array ("Blazer", "(compatible; Blazer)" );
$KnownBrowsers [] = array ("Bobby", "(Bobby)(.*)(RTP\-HTTPClient)" );
$KnownBrowsers [] = array ("Boitho.com", "(boitho\.com\-dc)(.*)(www\.boitho\.com)" );
$KnownBrowsers [] = array ("Brain \\2", "(Brain\/)([\d]+\.[\d]+)" );
$KnownBrowsers [] = array ("Browsers Part", "(Browsers Part)" );
$KnownBrowsers [] = array ("Buscaplus", "(Buscaplus)(.*)(www\.buscaplus\.com)" );
$KnownBrowsers [] = array ("BuyGet \\2", "(BuyGet\/)([\d]+\.[\d]+)(.*)(Agent\-Admin)" );
$KnownBrowsers [] = array ("CacheBot", "(CacheBot)(.*)(www\.cachebot\.com)" );
$KnownBrowsers [] = array ("CDM", "^(CDM)" );
$KnownBrowsers [] = array ("Cerberian Drtrs", "(compatible; Cerberian Drtrs)" );
$KnownBrowsers [] = array ("CERN-HTTPD \\2", "(via proxy gateway CERN\-HTTPD\/)([\d]+\.[\d]+)" );
$KnownBrowsers [] = array ("CFNetwork", "(cfetch|CFNetwork)" );
$KnownBrowsers [] = array ("Ericsson CLDC \\2", "(Configuration\/CLDC\-)([\d]+\.[\d]+)" );
$KnownBrowsers [] = array ("Clushbot", "(Clushbot)(.*)(www\.clush\.com)" );
$KnownBrowsers [] = array ("Commoodre64", "(Commodore64)" );
$KnownBrowsers [] = array ("Contiki", "(dunkles\.com\/adam\/contiki)" );
$KnownBrowsers [] = array ("Convera Multimedia", "(ConveraMultiMediaCrawler)(.*)(www\.authoritativeweb\.com)" );
$KnownBrowsers [] = array ("CosmixCrawler", "(CosmixCrawler)" );
$KnownBrowsers [] = array ("ISSpider", "(ISSpider\-[\d]+)" );
$KnownBrowsers [] = array ("Crazy Browser (\\3) \\6", "(compatible; ((MSIE ([\d]+\.[\d]+))?(.*)))(Crazy Browser )([\d]+\.[\d]+\.[\d]+)" );
$KnownBrowsers [] = array ("curl \\2 \\3", "(libcurl\/)([\d]+\.[\d]+\.[\d]+)(.*)((OpenSSL\/([\d]+\.[\d]+\.[a-z0-9]+))?)" );
$KnownBrowsers [] = array ("DA \\2", "(DA )([\d]+\.[\d]+)" );
$KnownBrowsers [] = array ("Daemon", "(daemon)(.*)(AmigaOS)" );
$KnownBrowsers [] = array ("DataFountains Downloader", "(DataFountains)(Downloader)" );
$KnownBrowsers [] = array ("DB Browse", "(compatible; DB Browse)" );
$KnownBrowsers [] = array ("deepak-USC", "(deepak\-USC\/ISI)" );
$KnownBrowsers [] = array ("Deepnet Explorer", "(Deepnet Explorer)" );
$KnownBrowsers [] = array ("Dillo \\2", "(Dillo\/)([\d]+\.[\d]+\.[\d]+)" );
$KnownBrowsers [] = array ("NaverRobot", "(dloader\(NaverRobot\))" );
$KnownBrowsers [] = array ("DLW \\2", "(compatible; DLW )([\d]+\.[\d]+)" );
$KnownBrowsers [] = array ("DoCoMo \\2", "(DoCoMo\/)([\d]+\.[\d]+)" );
$KnownBrowsers [] = array ("Doris \\2", "(Doris\/)([\d]+\.[\d]+)(.*)(Symbian)" );
$KnownBrowsers [] = array ("Download.exe", "(Download\.exe)(.*)(www\.sql\-und\-xml\.de)" );
$KnownBrowsers [] = array ("Download Master", "(Download Master)" );
$KnownBrowsers [] = array ("Download Ninja", "(Download Ninja)" );
$KnownBrowsers [] = array ("Easy DL \\2", "(EasyDL\/)([\d]+\.[\d]+)(.*)(keywen\.com\/Encyclopedia\/Bot)" );
$KnownBrowsers [] = array ("ELinks \\3", "(ELinks)(\s\(|\/)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Enigma Browser", "(Enigma Browser)" );
$KnownBrowsers [] = array ("Explorer Win95", "(Explorer \/)(.*)(\(Windows 95;)" );
$KnownBrowsers [] = array ("FastWeb", "(compatible; MSIE)(.*)(FastWeb)" );
$KnownBrowsers [] = array ("FavOrg", "(FavOrg)" );
$KnownBrowsers [] = array ("FDM", "^(FDM)" );
$KnownBrowsers [] = array ("FlashGet", "(FlashGet)" );
$KnownBrowsers [] = array ("FOOZWAK", "(FOOZWAK)(.*)(zeep;)(.*)(CheeseMatic)" );
$KnownBrowsers [] = array ("FreshDownload \\2", "(FreshDownload\/)([\d]+\.[\d]+\.)" );
$KnownBrowsers [] = array ("Funky Little Browser", "(Funky Little Browser)" );
$KnownBrowsers [] = array ("Galeon \\2", "(Galeon.)(([\d]+\.[\d]+(\.[\d]+)?)?)" );
$KnownBrowsers [] = array ("GetRight \\2", "(GetRight.)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Go ahead got it", "(Go\-Ahead\-Got\-It)" );
$KnownBrowsers [] = array ("GrubClient", "(compatible;)(.*)([gG]rub?[cC]lient)" );
$KnownBrowsers [] = array ("GrubCrawler", "(grub crawler)" );
$KnownBrowsers [] = array ("GSA-Crawler", "(gsa\-crawler)" );
$KnownBrowsers [] = array ("Happy-Browser", "(Happy\-Browser)" );
$KnownBrowsers [] = array ("HLoader", "(HLoader)" );
$KnownBrowsers [] = array ("Homerweb", "(Homerweb)" );
$KnownBrowsers [] = array ("HooWWWer", "(HooWWWer)(.*)(cosco\.hiit\.fi)" );
$KnownBrowsers [] = array ("Hop", "^(Hop)" );
$KnownBrowsers [] = array ("Hozilla \\2", "(Hozilla.)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("HTTPClient \\2", "(HTTPClient.)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Hyperlink", "(Hyperlink)(.*)(Commodore)" );
$KnownBrowsers [] = array ("IBrowse \\2", "(IBrowse.)(([\d]+\.[\d]+(\.[\d]+)?)?)" );
$KnownBrowsers [] = array ("iCab \\2", "(iCab.)(([\d]+\.[\d]+(\.[\d]+)?)?)" );
$KnownBrowsers [] = array ("ICE Browser \\2", "(ICE.?Browser.)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("IQ Search", "(IQSearch)" );
$KnownBrowsers [] = array ("iTunes \\3", "(i[tT]unes)(.?(([\d]+\.[\d]+(\.[\d]+)?))?)" );
$KnownBrowsers [] = array ("Jakarta \\2", "(Jakarta Commons\-HttpClient.)(([\d]+\.[\d]+(\.[\d]+)?)?)" );
$KnownBrowsers [] = array ("Java \\2", "(Java[^\d]?)(([\d]+\.[\d]+(\.[\d]+)?)?)" );
$KnownBrowsers [] = array ("iBrowser", "(iBrowser)" );
$KnownBrowsers [] = array ("JoBo", "(JoBo)(.*)(www\.matuschek\.net)" );
$KnownBrowsers [] = array ("JoeDog", "(JoeDog)" );
$KnownBrowsers [] = array ("Kittiecentral", "(compatible; Kittiecentral\.com)" );
$KnownBrowsers [] = array ("Google WAP-Proxy", "(Klondike)(.*)(Google WAP)" );
$KnownBrowsers [] = array ("KnowItAll", "(KnowItAll)(.*)(cs\.washington\.edu)" );
$KnownBrowsers [] = array ("Konqueror \\2", "(Konqueror.?)(([\d]+\.[\d]+(\.[\d]+)?)?)" );
$KnownBrowsers [] = array ("Kurzor", "(Kurzor; http:\/\/adcenter\.hu)" );
$KnownBrowsers [] = array ("Lament", "(Lament)" );
$KnownBrowsers [] = array ("larbin", "(larbin)(.*)(unspecified\.mail)" );
$KnownBrowsers [] = array ("LB-Crawler", "(LB\-Crawler)" );
$KnownBrowsers [] = array ("LG", "(LG\/U8110)" );
$KnownBrowsers [] = array ("Libfetch \\2", "(libfetch.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Linkman", "(compatible; Linkman)" );
$KnownBrowsers [] = array ("Links \\5", "(Links|LINKS)(((.*?)([\d]+\.[\d]+(\.[\d]+)?))?)" );
$KnownBrowsers [] = array ("LinkSweeper", "^(LinkSweeper)" );
$KnownBrowsers [] = array ("lmspider", "(lmspider)(.*)(scansoft\.com)" );
$KnownBrowsers [] = array ("Lotus-Notes \\2", "(Lotus\-Notes.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("LTH Browser \\2", "(LTH Browser.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("LWP \\5", "(LWP|lwp)(.*?)(trivial|Simple|request)(.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Lynx \\2", "(Lyn[xX].)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("MacNetwork", "(MacNetwork)" );
$KnownBrowsers [] = array ("Metager", "(Metager)(.*)(metager2\.de)" );
$KnownBrowsers [] = array ("MicroSux", "(MicroSux)" );
$KnownBrowsers [] = array ("Minstrel-Browser", "(Minstrel\-Browse)(.*)(www\.minstrel\.org\.uk)" );
$KnownBrowsers [] = array ("Missigua Locator", "(Missigua Locator)" );
$KnownBrowsers [] = array ("MnoGoSearch \\2", "(MnoGoSearch.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Mosaic \\2", "(Mosaic.?)(([\d]+\.[\d]+(\.[\d]+)?)?)" );
$KnownBrowsers [] = array ("MOT-V551", "(MOT\-V511)" );
$KnownBrowsers [] = array ("Mozdex", "(Mozdex; http:\/\/www\.mozdex\.com)" );
$KnownBrowsers [] = array ("MSXPlayer", "(MSXPLAYer)" );
$KnownBrowsers [] = array ("MuscatFerret", "(MuscatFerret)" );
$KnownBrowsers [] = array ("MVA Client", "(MVAClient)" );
$KnownBrowsers [] = array ("My Browser", "(My Browser)" );
$KnownBrowsers [] = array ("NCSA-Mosaic", "(NCSA_Mosaic)" );
$KnownBrowsers [] = array ("NetBox \\2", "(Net[bB]ox.?|Netgem.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("NetPositive \\2", "(NetPositive.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Netscape \\5", "(Mozilla)(compatible;)(.*)(Netscape)(([\d]+\.[\d]+(\.[\d]+)?)?)" );
$KnownBrowsers [] = array ("Netscape \\2", "(Mozilla.?|Netscape.?)(([\d]+\.[\d]+(\.[\d]+)?)?)(.*)(^compatible|^Gecko)" );
$KnownBrowsers [] = array ("Netscape \\2", "^(Netscape.?)([\d]+(\.[\d]+(\.[\d]+)?)?)" );
$KnownBrowsers [] = array ("NetVisualize", "(NetVisualize)" );
$KnownBrowsers [] = array ("NEWT ActiveX", "(NEWT ActiveX)" );
$KnownBrowsers [] = array ("Nintendo64 \\2", "(Nintendo64.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Nokia \\3", "(Nokia([\d]+)?.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Nokia N-Gage", "(NokiaN\-Gage)" );
$KnownBrowsers [] = array ("NP", "(NP)(.*)(www\.nanoprotect\.com)" );
$KnownBrowsers [] = array ("NPT", "(compatible;)(.*)(NPT)" );
$KnownBrowsers [] = array ("NutchCVS \\2", "(NutchCVS.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Nutscrape \\2", "(Nutscrape.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("NutchOSUOSL", "(NutchOSUOSL)" );
$KnownBrowsers [] = array ("NW Browser/Spider", "(NW\.Browser|NWSpider)" );
$KnownBrowsers [] = array ("ObjectSearch \\2", "(ObjectSearch.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("OffByOne", "(compatible; OffByOne)" );
$KnownBrowsers [] = array ("OmniWeb \\2", "(compatible; OmniWeb.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("OZ Browser", "(OZ Browser)" );
$KnownBrowsers [] = array ("P3P Client", "(P3P Client)" );
$KnownBrowsers [] = array ("Penguin Fear", "(PenguinFear)" );
$KnownBrowsers [] = array ("Phillips Fisio", "(PHILLIPS\-Fisio)" );
$KnownBrowsers [] = array ("PHP \\2", "(PHP.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("PhpDig", "(PhpDig)(.*)(www\.phpdig\.net)" );
$KnownBrowsers [] = array ("PHP VersionTracker", "(PHP version tracker)" );
$KnownBrowsers [] = array ("Pike HTTP client", "(compatible;)(.*)(Pike HTTP client)" );
$KnownBrowsers [] = array ("PinkSock \\2", "(PinkSock.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("pipeLiner", "(pipeLiner)" );
$KnownBrowsers [] = array ("POE-Components", "(POE\-Component\-Client\-HTTP)" );
$KnownBrowsers [] = array ("Podexter", "(Podexter)(.*)(www\.podex\.com)" );
$KnownBrowsers [] = array ("Portalmmm", "(portalmmm)" );
$KnownBrowsers [] = array ("Powermarks", "(compatible;)(.*)(Powermarks)" );
$KnownBrowsers [] = array ("Privoxy \\2", "(Privoxy.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Program Shareware", "(Program Shareware)" );
$KnownBrowsers [] = array ("Progressiv Download", "(Progressive Download)" );
$KnownBrowsers [] = array ("Proxomitron", "(Proxomitron)(.*)(www\.proxomitron\.de)" );
$KnownBrowsers [] = array ("puf", "^(puf)" );
$KnownBrowsers [] = array ("Python urllib \\2", "(Python\-urllib.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Qarp", "(Qarp\-)" );
$KnownBrowsers [] = array ("RealDownload \\2", "(RealDownload.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Reaper \\2", "(Reaper.?)([\d]+\.[\d]+(\.[\d]+)?)(.*)(www\.sitesearch\.ca)" );
$KnownBrowsers [] = array ("RPT-HTTPClient", "(RPT\-HTTPClient)" );
$KnownBrowsers [] = array ("RT-Browser", "(RT\-Browser)" );
$KnownBrowsers [] = array ("SA", "(SA\/)" );
$KnownBrowsers [] = array ("Safari \\7", "(Mozilla)(.*)(Macintosh;)(.*)(like Gecko)(Safari.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Safer-Surf", "(compatible;)(.*)(SaferSurf)" );
$KnownBrowsers [] = array ("Satan", "(Satan 666)" );
$KnownBrowsers [] = array ("Savvybot", "(savvybot)" );
$KnownBrowsers [] = array ("Search-Channel", "(Search\-Channel)" );
$KnownBrowsers [] = array ("SecretBrowser \\2", "(SecretBrowser.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("S.E.K Tron", "(S\.?E\.?K.Tron)" );
$KnownBrowsers [] = array ("SHARP-TQ", "(SHARP\-TQ)" );
$KnownBrowsers [] = array ("Shockwave Flash", "(Shockwave Flash)" );
$KnownBrowsers [] = array ("ShowLinks", "(ShowLinks)" );
$KnownBrowsers [] = array ("Simpy", "(Simpy)(.*)(www\.simpy\.com)" );
$KnownBrowsers [] = array ("SIE-S55", "(SIE\-S55)" );
$KnownBrowsers [] = array ("SiteBar \\2", "(SiteBar.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("NetFront \\2", "(compatible;)(.*)(NetFront.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Smurf Power", "(Smurf Power)" );
$KnownBrowsers [] = array ("Snoopy", "(Snoopy)" );
$KnownBrowsers [] = array ("Snowstorm", "(Snowstorm)" );
$KnownBrowsers [] = array ("Solar Conflict", "(Solar Conflict)(.*)(www\.snoconflict\.com)" );
$KnownBrowsers [] = array ("Ericsson \\2", "(SonyErocsson)([a-zA-Z]+[0-9]+)" );
$KnownBrowsers [] = array ("Sopheus Project", "(Sopheus Project)" );
$KnownBrowsers [] = array ("SpaceBison \\2", "(Space\s?Bison.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("SpiderMan", "(SpiderMan)" );
$KnownBrowsers [] = array ("StackRambler", "(StackRambler)" );
$KnownBrowsers [] = array ("StarDownloader", "(StarDownloader)" );
$KnownBrowsers [] = array ("Steeler", "(Steeler)(.*)(www\.tkl\.iis\.u\-tokyo\.ac\.jp)" );
$KnownBrowsers [] = array ("SuperCleaner", "(compatible;)(.*)(SuperCleaner)" );
$KnownBrowsers [] = array ("SuperGrass", "(Supergrass)" );
$KnownBrowsers [] = array ("Toaster", "(Toaster\/)" );
$KnownBrowsers [] = array ("UP.Browser \\2", "(UP\.Browser.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("w3m \\2", "(w3m.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("WebCapture \\2", "(WebCapture.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("WebStriper \\2", "(WebStripper.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("WebRescuer", "(WebRescuer)" );
$KnownBrowsers [] = array ("WebTV \\2", "(WebTV.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("XBox", "([xX][Bb][oO][xX])" );
$KnownBrowsers [] = array ("Opera \\2", "(Opera.?)([\d]+\.[\d]+(\.[\d]+)?)?" );
$KnownBrowsers [] = array ("Firefox \\6", "(Mozilla)(.*)(Gecko\/)(.*)(Firefox.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Camino \\6", "(Mozilla)(.*)(Gecko\/)(.*)(Camino.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Epiphany \\6", "(Mozilla)(.*)(Gecko\/)(.*)(Epiphany.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Firebird \\6", "(Mozilla)(.*)(Gecko\/)(.*)(Firebird.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("K-Melon \\6", "(Mozilla)(.*)(Gecko\/)(.*)(K\-Melon.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("MultiZilla \\6", "(Mozilla)(.*)(Gecko\/)(.*)(MultiZilla.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Netscape \\6", "(Mozilla)(.*)(Gecko\/)(.*)(Netscape.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Mozilla \\4", "(Mozilla)(.*)(rv:)([\d]+\.[\d]+(\.[\d]+)?)(.*)(Gecko\/[\d]{8})" );
$KnownBrowsers [] = array ("Internet Explorer \\4", "(Mozilla.?)(compatible;)(MSIE.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Internet Explorer \\2", "^(MSIE.?)([\d]+\.[\d]+(\.[\d]+)?)" );
$KnownBrowsers [] = array ("Mozilla compatible \\2", "(Mozilla.?)(([\d]+\.[\d]+(\.[\d]+)?)?)" );

// the Toplevel-Domainlist
$ToplevelDomainList = array_unique(
											array("ac"=>"Ascension Island",
														"ad"=>"Andorra",
														"ae"=>"United Arab Emirates",
														"af"=>"Afghanistan",
														"ag"=>"Antigua and Barbuda",
														"ai"=>"Anguilla",
														"al"=>"Albania",
														"am"=>"Armenia",
														"an"=>"Netherlands Antilles",
														"ao"=>"Angola",
														"aq"=>"Antarctica",
														"ar"=>"Argentina",
														"as"=>"American Samoa",
														"at"=>"Austria",
														"au"=>"Australia",
														"aw"=>"Aruba",
														"az"=>"Azerbaijan",
														"ax"=>"Aland Islands",
														"ba"=>"Bosnia and Herzegovina",
														"bb"=>"Barbados",
														"bd"=>"Bangladesh",
														"be"=>"Belgium",
														"bf"=>"Burkina Faso",
														"bg"=>"Bulgaria",
														"bh"=>"Bahrain",
														"bi"=>"Burundi",
														"bj"=>"Benin",
														"bm"=>"Bermuda",
														"bn"=>"Brunei Darussalam",
														"bo"=>"Bolivia",
														"br"=>"Brazil",
														"bs"=>"Bahamas",
														"bt"=>"Bhutan",
														"bv"=>"Bouvet Island",
														"bw"=>"Botswana",
														"by"=>"Belarus",
														"bz"=>"Belize",
														"ca"=>"Canada",
														"cc"=>"Cocos (Keeling) Islands",
														"cd"=>"Congo, The Democratic Republic of the",
														"cf"=>"Central African Republic",
														"cg"=>"Congo, Republic of",
														"ch"=>"Switzerland",
														"ci"=>"Cote d'Ivoire",
														"ck"=>"Cook Islands",
														"cl"=>"Chile",
														"cm"=>"Cameroon",
														"cn"=>"China",
														"co"=>"Colombia",
														"cr"=>"Costa Rica",
														"cs"=>"Serbia and Montenegro",
														"cu"=>"Cuba",
														"cv"=>"Cape Verde",
														"cx"=>"Christmas Island",
														"cy"=>"Cyprus",
														"cz"=>"Czech Republic",
														"de"=>"Germany",
														"dj"=>"Djibouti",
														"dk"=>"Denmark",
														"dm"=>"Dominica",
														"do"=>"Dominican Republic",
														"dz"=>"Algeria",
														"ec"=>"Ecuador",
														"ee"=>"Estonia",
														"eg"=>"Egypt",
														"eh"=>"Western Sahara",
														"er"=>"Eritrea",
														"es"=>"Spain",
														"et"=>"Ethiopia",
														"eu"=>"European Union",
														"fi"=>"Finland",
														"fj"=>"Fiji",
														"fk"=>"Falkland Islands (Malvinas)",
														"fm"=>"Micronesia, Federal State of",
														"fo"=>"Faroe Islands",
														"fr"=>"France",
														"ga"=>"Gabon",
														"gb"=>"United Kingdom",
														"gd"=>"Grenada",
														"ge"=>"Georgia",
														"gf"=>"French Guiana",
														"gg"=>"Guernsey",
														"gh"=>"Ghana",
														"gi"=>"Gibraltar",
														"gl"=>"Greenland",
														"gm"=>"Gambia",
														"gn"=>"Guinea",
														"gp"=>"Guadeloupe",
														"gq"=>"Equatorial Guinea",
														"gr"=>"Greece",
														"gs"=>"South Georgia and the South Sandwich Islands",
														"gt"=>"Guatemala",
														"gu"=>"Guam",
														"gw"=>"Guinea-Bissau",
														"gy"=>"Guyana",
														"hk"=>"Hong Kong",
														"hm"=>"Heard and McDonald Islands",
														"hn"=>"Honduras",
														"hr"=>"Croatia/Hrvatska",
														"ht"=>"Haiti",
														"hu"=>"Hungary",
														"id"=>"Indonesia",
														"ie"=>"Ireland",
														"il"=>"Israel",
														"im"=>"Isle of Man",
														"in"=>"India",
														"io"=>"British Indian Ocean Territory",
														"iq"=>"Iraq",
														"ir"=>"Iran, Islamic Republic of",
														"is"=>"Iceland",
														"it"=>"Italy",
														"je"=>"Jersey",
														"jm"=>"Jamaica",
														"jo"=>"Jordan",
														"jp"=>"Japan",
														"ke"=>"Kenya",
														"kg"=>"Kyrgyzstan",
														"kh"=>"Cambodia",
														"ki"=>"Kiribati",
														"km"=>"Comoros",
														"kn"=>"Saint Kitts and Nevis",
														"kp"=>"Korea, Democratic People's Republic",
														"kr"=>"Korea, Republic of",
														"kw"=>"Kuwait",
														"ky"=>"Cayman Islands",
														"kz"=>"Kazakhstan",
														"la"=>"Lao People's Democratic Republic",
														"lb"=>"Lebanon",
														"lc"=>"Saint Lucia",
														"li"=>"Liechtenstein",
														"lk"=>"Sri Lanka",
														"lr"=>"Liberia",
														"ls"=>"Lesotho",
														"lt"=>"Lithuania",
														"lu"=>"Luxembourg",
														"lv"=>"Latvia",
														"ly"=>"Libyan Arab Jamahiriya",
														"ma"=>"Morocco",
														"mc"=>"Monaco",
														"md"=>"Moldova, Republic of",
														"mg"=>"Madagascar",
														"mh"=>"Marshall Islands",
														"mk"=>"Macedonia, The Former Yugoslav Republic of",
														"ml"=>"Mali",
														"mm"=>"Myanmar",
														"mn"=>"Mongolia",
														"mo"=>"Macau",
														"mp"=>"Northern Mariana Islands",
														"mq"=>"Martinique",
														"mr"=>"Mauritania",
														"ms"=>"Montserrat",
														"mt"=>"Malta",
														"mu"=>"Mauritius",
														"mv"=>"Maldives",
														"mw"=>"Malawi",
														"mx"=>"Mexico",
														"my"=>"Malaysia",
														"mz"=>"Mozambique",
														"na"=>"Namibia",
														"nc"=>"New Caledonia",
														"ne"=>"Niger",
														"nf"=>"Norfolk Island",
														"ng"=>"Nigeria",
														"ni"=>"Nicaragua",
														"nl"=>"Netherlands",
														"no"=>"Norway",
														"np"=>"Nepal",
														"nr"=>"Nauru",
														"nu"=>"Niue",
														"nz"=>"New Zealand",
														"om"=>"Oman",
														"pa"=>"Panama",
														"pe"=>"Peru",
														"pf"=>"French Polynesia",
														"pg"=>"Papua New Guinea",
														"ph"=>"Philippines",
														"pk"=>"Pakistan",
														"pl"=>"Poland",
														"pm"=>"Saint Pierre and Miquelon",
														"pn"=>"Pitcairn Island",
														"pr"=>"Puerto Rico",
														"ps"=>"Palestinian Territories",
														"pt"=>"Portugal",
														"pw"=>"Palau",
														"py"=>"Paraguay",
														"qa"=>"Qatar",
														"re"=>"Reunion Island",
														"ro"=>"Romania",
														"ru"=>"Russian Federation",
														"rw"=>"Rwanda",
														"sa"=>"Saudi Arabia",
														"sb"=>"Solomon Islands",
														"sc"=>"Seychelles",
														"sd"=>"Sudan",
														"se"=>"Sweden",
														"sg"=>"Singapore",
														"sh"=>"Saint Helena",
														"si"=>"Slovenia",
														"sj"=>"Svalbard and Jan Mayen Islands",
														"sk"=>"Slovak Republic",
														"sl"=>"Sierra Leone",
														"sm"=>"San Marino",
														"sn"=>"Senegal",
														"so"=>"Somalia",
														"sr"=>"Suriname",
														"st"=>"Sao Tome and Principe",
														"sv"=>"El Salvador",
														"sy"=>"Syrian Arab Republic",
														"sz"=>"Swaziland",
														"tc"=>"Turks and Caicos Islands",
														"td"=>"Chad",
														"tf"=>"French Southern Territories",
														"tg"=>"Togo",
														"th"=>"Thailand",
														"tj"=>"Tajikistan",
														"tk"=>"Tokelau",
														"tl"=>"Timor-Leste",
														"tm"=>"Turkmenistan",
														"tn"=>"Tunisia",
														"to"=>"Tonga",
														"tp"=>"East Timor",
														"tr"=>"Turkey",
														"tt"=>"Trinidad and Tobago",
														"tv"=>"Tuvalu",
														"tw"=>"Taiwan",
														"tz"=>"Tanzania",
														"ua"=>"Ukraine",
														"ug"=>"Uganda",
														"uk"=>"United Kingdom",
														"um"=>"United States Minor Outlying Islands",
														"us"=>"United States",
														"uy"=>"Uruguay",
														"uz"=>"Uzbekistan",
														"va"=>"Holy See (Vatican City State)",
														"vc"=>"Saint Vincent and the Grenadines",
														"ve"=>"Venezuela",
														"vg"=>"Virgin Islands, British",
														"vi"=>"Virgin Islands, U.S.",
														"vn"=>"Vietnam",
														"vu"=>"Vanuatu",
														"wf"=>"Wallis and Futuna Islands",
														"ws"=>"Western Samoa",
														"ye"=>"Yemen",
														"yt"=>"Mayotte",
														"yu"=>"Yugoslavia",
														"za"=>"South Africa",
														"zm"=>"Zambia",
														"zw"=>"Zimbabwe",
														"ads"=>"ads",
														"agency"=>"agency",
														"aids"=>"aids",
														"air"=>"air",
														"antiques"=>"antiques",
														"art"=>"art",
														"artists"=>"artists",
														"auction"=>"auction",
														"audio"=>"audio",
														"bbs"=>"bbs",
														"books"=>"books",
														"cafe"=>"cafe",
														"cam"=>"cam",
														"card"=>"card",
														"cars"=>"cars",
														"center"=>"center",
														"city"=>"city",
														"channel"=>"channel",
														"church"=>"church",
														"club"=>"club",
														"commerce"=>"commerce",
														"computers"=>"computers",
														"gallery"=>"gallery",
														"games"=>"games",
														"gay"=>"gay",
														"graphics"=>"graphics",
														"group"=>"group",
														"guide"=>"guide",
														"hotel"=>"hotel",
														"help"=>"help",
														"history"=>"history",
														"index"=>"index",
														"insurance"=>"insurance",
														"jazz"=>"jazz",
														"jobs"=>"jobs",
														"lab"=>"lab",
														"mad"=>"mad",
														"mag"=>"mag",
														"magic"=>"magic",
														"mail"=>"mail",
														"market"=>"market",
														"media"=>"media",
														"men"=>"men",
														"monitor"=>"monitor",
														"records"=>"records",
														"school"=>"school",
														"service"=>"service",
														"sex"=>"sex",
														"shoes"=>"shoes",
														"shop"=>"shop",
														"show"=>"show",
														"security"=>"security",
														"society"=>"society",
														"sound"=>"sound",
														"shareware"=>"shareware",
														"site"=>"site",
														"software"=>"software",
														"solutions"=>"solutions",
														"soup"=>"soup",
														"space"=>"space",
														"sports"=>"sports",
														"star"=>"star",
														"studios"=>"studios",
														"sucks"=>"sucks",
														"systems"=>"systems",
														"tech"=>"tech",
														"consulting"=>"consulting",
														"culture"=>"culture",
														"design"=>"design",
														"digital"=>"digital",
														"direct"=>"direct",
														"dtv"=>"dtv",
														"dvd"=>"dvd",
														"factory"=>"factory",
														"fashion"=>"fashion",
														"festival"=>"festival",
														"fiction"=>"fiction",
														"film"=>"film",
														"films"=>"films",
														"foundation"=>"foundation",
														"free"=>"free",
														"fun"=>"fun",
														"fund"=>"fund",
														"funds"=>"funds",
														"movie"=>"movie",
														"music"=>"music",
														"news"=>"news",
														"now"=>"now",
														"nyc"=>"nyc",
														"one"=>"one",
														"online"=>"online",
														"opera"=>"opera",
														"page"=>"page",
														"partners"=>"partners",
														"people"=>"people",
														"planet"=>"planet",
														"politics"=>"politics",
														"power"=>"power",
														"productions"=>"productions",
														"projects"=>"projects",
														"properties"=>"properties",
														"radio"=>"radio",
														"temple"=>"temple",
														"theater"=>"theater",
														"time"=>"time",
														"times"=>"times",
														"toys"=>"toys",
														"trade"=>"trade",
														"travel"=>"travel",
														"voice"=>"voice",
														"war"=>"war",
														"watch"=>"watch",
														"weather"=>"weather",
														"women"=>"women",
														"world"=>"world",
														"writer"=>"writer",
														"zine"=>"zine",
														"zone"=>"zone",
														"africa"=>"africa",
														"llc"=>"llc",
														"sansansan"=>"sansansan",
														"three33"=>"three33",
														"wap"=>"wap",
														"biz"=>"biz",
														"cool"=>"cool",
														"fam"=>"fam",
														"inc"=>"inc",
														"xxx"=>"xxx",
														"ebiz"=>"ebiz",
														"firm"=>"firm",
														"real"=>"real",
														"ecom"=>"ecom",
														"home"=>"home",
														"cash"=>"cash",
														"global"=>"global",
														"secure"=>"secure",
														"coop"=>"coop",
														"co-op"=>"co-op",
														"dir"=>"dir",
														"dot"=>"dot",
														"info"=>"info",
														"spot"=>"spot",
														"surf"=>"surf",
														"web"=>"web",
														"dubai"=>"dubai",
														"go"=>"go",
														"event"=>"event",
														"fin"=>"fin",
														"find"=>"find",
														"yp"=>"yp",
														"ypa"=>"ypa",
														"ypi"=>"ypi",
														"game"=>"game",
														"ltd"=>"ltd",
														"store"=>"store",
														"tour"=>"tour",
														"geo"=>"geo",
														"health"=>"health",
														"i"=>"i",
														"kids"=>"kids",
														"law"=>"law",
														"mall"=>"mall",
														"svc"=>"svc",
														"mas"=>"mas",
														"max"=>"max",
														"mid"=>"mid",
														"mis"=>"mis",
														"mobi"=>"mobi",
														"mobile"=>"mobile",
														"own"=>"own",
														"mus"=>"mus",
														"muse"=>"muse",
														"musea"=>"musea",
														"museum"=>"museum",
														"museums"=>"museums",
														"jina"=>"jina",
														"name"=>"name",
														"san"=>"san",
														"xing"=>"xing",
														"nom"=>"nom",
														"per"=>"per",
														"pid"=>"pid",
														"post"=>"post",
														"pro"=>"pro",
														"tel"=>"tel",
														"union"=>"union",
														"com"=>"Commercial",
														"edu"=>"Education",
														"gov"=>"Goverment",
														"int"=>"International",
														"mil"=>"Military",
														"net"=>"Networks",
														"org"=>"Organizations",
														"local"=>"Local Domain")
											);

if (!function_exists('parse_ini_string')) {
	function parse_ini_string($str, $ProcessSections = false) {
		$lines = explode("\n", $str);
		$return = array();
		$inSect = false;
		foreach ($lines as $line) {
			$line = trim($line);
			if (!$line || $line[0] == "#" || $line[0] == ";") {
				continue;
			}
			
			if (($line[0] == "[") && ($endIdx = strpos($line, "]"))) {
				$inSect = substr($line, 1, $endIdx - 1);
				continue;
			}
			if (!strpos($line, '=')) { // (We don't use "=== false" because value 0 is not valid as well)
				continue;
			}
			
			$tmp = explode("=", $line, 2);
			$isArray = false;
			if (substr($tmp[0], -2) == '[]') {
				$tmp[0] = substr($tmp[0], 0, -2);
				$isArray = true;
			}
			if ($ProcessSections && $inSect) {
				if ($isArray) {
					if (!array_key_exists(trim($tmp[0]), $return[$inSect]) || !is_array($return[$inSect][trim($tmp[0])])) {
						$return[$inSect][trim($tmp[0])] = array();
					}
					$return[$inSect][trim($tmp[0])][] = ltrim($tmp[1]);
				} else {
					$return[$inSect][trim($tmp[0])] = ltrim($tmp[1]);
				}
			} else {
				if ($isArray) {
					if (!array_key_exists(trim($tmp[0]), $return) || !is_array($return[trim($tmp[0])])) {
						$return[trim($tmp[0])] = array();
					}
					$return[trim($tmp[0])][] = ltrim($tmp[1]);
				} else {
					$return[trim($tmp[0])] = ltrim($tmp[1]);
				}
			}
		}
		return $return;
	}
}

function print_object($obj) {
	print ( "<div style='z-index:999;display:block;position:absolute;border:2px dotted red;background-color:yellow;text-align:left;overflow:auto;width:700px;height:600px;' ondblclick='this.parentNode.removeChild(this);'><pre>" );
	ob_start ();
	print_r ( $obj );
	$str = ob_get_clean ();
	$str = str_replace ( '<', '&lt;', $str );
	$str = str_replace ( '>', '&gt;', $str );
	print ( $str );
	print ( "</pre></div>" );
}

?>